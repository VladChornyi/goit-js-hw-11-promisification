{"version":3,"sources":["js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["delay","ms","promise","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAAA,MAAMA,EAAQC,IAMLC,OALS,IAAIC,QAAQC,IAC1BC,WAAW,KACTD,EAAQH,IACPA,MAKDK,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ;;ACVjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIb,QAAQC,GACjBA,EACEW,EAASE,IAAIC,GAASA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,KAKnFZ,EAASa,GAAgBX,QAAQY,MAAMD,GAK7CL,EAAgBH,EAAO,SACvBG,EAAgBH,EAAO,OAKvBG,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AC3BnC,MAAMe,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IAChB5B,MAAAA,EAAQqB,EAA0B,IAAK,KAEtC,OAAA,IAAIlB,QAAQ,CAACC,EAASyB,KAC3BxB,WAAW,KACUmB,KAAKE,SAAW,GAGjCtB,EAAQ,CAAE0B,GAAIF,EAAYE,GAAI9B,MAAAA,IAE9B6B,EAAOD,EAAYE,KAEpB9B,MAID+B,EAAa,EAAGD,GAAAA,EAAI9B,MAAAA,MACxBQ,QAAQC,mBAAmBqB,kBAAmB9B,QAG1CgC,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAa/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAEhEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAE/DL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH;;AC7ChE,aAHA,QAAA,oBACA,QAAA,cACA,QAAA,cACA,QAAA","file":"src.9fc18620.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n  const promise = new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n  return promise;\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n// Напиши функцию `delay(ms)`, которая возвращает промис, переходящий в состояние\n// `\"resolved\"` через `ms` миллисекунд. Значением исполнившегося промиса должно\n// быть то кол-во миллисекунд которое передали во время вызова функции `delay`.\n","// Перепиши функцию `toggleUserState()` так, чтобы она не использовала\n// callback-функцию `callback`, а принимала всего два параметра `allUsers` и\n// `userName` и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise(resolve =>\n    resolve(\n      allUsers.map(user => (user.name === userName ? { ...user, active: !user.active } : user)),\n    ),\n  );\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\ntoggleUserState(users, 'Mango', logger);\ntoggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","// Перепиши функцию `makeTransaction()` так, чтобы она не использовала\n// callback-функции `onSuccess` и `onError`, а принимала всего один параметр\n// `transaction` и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, delay });\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, delay }) => {\n  console.log(`Transaction ${id} processed in ${delay}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n//  */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","import './sass/main.scss';\nimport './js/task1';\nimport './js/task2';\nimport './js/task3';\n"]}