{"version":3,"sources":["js/task1.ts","js/task2.ts","js/task3.ts","index.js"],"names":[],"mappings":";;;AAAA,IAAM,EAAO,SAAE,GAMN,OALS,IAAI,QAAQ,SAAA,GAC1B,WAAW,WACT,EAAQ,IACP,MAKD,EAAS,SAAC,GAAiB,OAAA,QAAQ,IAAI,kBAAA,OAAkB,EAAI,QAGnE,EAAM,KAAM,KAAK,GACjB,EAAM,KAAM,KAAK,GACjB,EAAM,MAAM,KAAK;;ACkBjB,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAtBM,EAAgB,CACpB,CAAE,KAAM,QAAS,QAAQ,GACzB,CAAE,KAAM,OAAQ,QAAQ,GACxB,CAAE,KAAM,OAAQ,QAAQ,GACxB,CAAE,KAAM,MAAO,QAAQ,IAGnB,EAAkB,SAAC,EAAiB,GACjC,OAAA,IAAI,QAAQ,SAAA,GACjB,OAAA,EACE,EAAS,IAAI,SAAA,GAAS,OAAA,EAAK,OAAS,EAAU,EAAA,EAAA,GAAM,GAAI,CAAE,QAAS,EAAK,SAAW,QAKnF,EAAS,SAAC,GAAwB,OAAA,QAAQ,MAAM,IAMtD,EAAgB,EAAO,SAAS,KAAK,GACrC,EAAgB,EAAO,OAAO,KAAK;;ACtBnC,IAAM,EAAsC,SAAC,EAAK,GACzC,OAAA,KAAK,MAAM,KAAK,UAAY,EAAM,EAAM,GAAK,IAGhD,EAAkB,SAAC,GACjB,IAAA,EAAQ,EAA0B,IAAK,KAEtC,OAAA,IAAI,QAAQ,SAAC,EAAS,GAC3B,WAAW,WACU,KAAK,SAAW,GAGjC,EAAQ,CAAE,GAAI,EAAY,GAAI,MAAK,IAEnC,EAAO,EAAY,KAEpB,MAID,EAAa,SAAC,GAAE,IAAA,EAAE,EAAA,GAAE,EAAK,EAAA,MAC7B,QAAQ,IAAI,eAAA,OAAe,EAAE,kBAAA,OAAiB,EAAK,QAG/C,EAAW,SAAC,GAChB,QAAQ,KAAK,gCAAA,OAAgC,EAAE,+BAajD,EAAgB,CAAE,GAAI,GAAI,OAAQ,MAAO,KAAK,GAAY,MAAM,GAEhE,EAAgB,CAAE,GAAI,GAAI,OAAQ,MAAO,KAAK,GAAY,MAAM,GAEhE,EAAgB,CAAE,GAAI,GAAI,OAAQ,KAAM,KAAK,GAAY,MAAM,GAE/D,EAAgB,CAAE,GAAI,GAAI,OAAQ,MAAO,KAAK,GAAY,MAAM;;ACnDhE,aAHA,QAAA,oBACA,QAAA,cACA,QAAA,cACA,QAAA","file":"src.e2351ee9.js","sourceRoot":"../src","sourcesContent":["const delay =( ms: number) => {\n  const promise = new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n  return promise;\n};\n\nconst logger = (time:unknown) => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n// Напиши функцию `delay(ms)`, которая возвращает промис, переходящий в состояние\n// `\"resolved\"` через `ms` миллисекунд. Значением исполнившегося промиса должно\n// быть то кол-во миллисекунд которое передали во время вызова функции `delay`.\n","// Перепиши функцию `toggleUserState()` так, чтобы она не использовала\n// callback-функцию `callback`, а принимала всего два параметра `allUsers` и\n// `userName` и возвращала промис.\ninterface User {\n  name: string,\n  active : boolean\n}\ntype Users = User[]\n\n\nconst users : Users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers: Users, userName : string) => {\n  return new Promise(resolve =>\n    resolve(\n      allUsers.map(user => (user.name === userName ? { ...user, active: !user.active } : user)),\n    ),\n  );\n};\n\nconst logger = (updatedUsers: Users) => console.table(updatedUsers);\n\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","// Перепиши функцию `makeTransaction()` так, чтобы она не использовала\n// callback-функции `onSuccess` и `onError`, а принимала всего один параметр\n// `transaction` и возвращала промис.\ntype Randomize = (a: number, b: number) => number\ninterface Transaction {\n  id: number,\n  amount?: number,\n  delay?: number \n};\n\nconst randomIntegerFromInterval:Randomize = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction: Transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, delay });\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, delay }: Transaction) => {\n  console.log(`Transaction ${id} processed in ${delay}ms`);\n};\n\nconst logError = (id: number) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n//  */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","import './sass/main.scss';\nimport './js/task1';\nimport './js/task2';\nimport './js/task3';\n"]}